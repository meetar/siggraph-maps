sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw
        
camera:
    type: perspective
    vanishing_point: [0, -1000]
    # type: isometric
    # axis: [-0.25, 1.]

lights:
    light1:
        type: directional
        direction: [1, 1, -.9]
        diffuse: .5
        ambient: [0.643, 0.643, 0.643]

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    flatpolys:
        base: polygons
        lighting: false # ignore lights
    shadow: # fake shadows by drawing another copy of the buildings underneath
        base: polygons
        lighting: false
        blend: multiply
        shaders:
            blocks:
                color: |
                    // Sample based on screenspace
                    // make a 2x2 pixel space
                    vec2 st = gl_FragCoord.xy / 2.;
                    // make a checkerboard
                    if ((fract(st.x) > .5 && fract(st.y) > .5) || (fract(st.x) < .5 && fract(st.y) < .5)) color.rgb = vec3(0., 0.0, 1.0);
                    else color = vec4(1.);

                position: position.xy += vec2(5., 3.) * position.z; // warp up and over
    lineshadow:
        base: lines
        mix: shadow
        lighting: false # ignore lights
        blend: multiply
        shaders:
            blocks:
                position: position.xy += 10.;

    windows:
        base: polygons
        shaders:
            uniforms:
                u_frequency: 8.
            blocks:
                color: |
                    vec3 vPos = v_world_position.xyz / u_frequency;
                    vec3 mask = mix(vec3(0.0), vec3(1.0), step(fract(mod(vPos, 1.)), vec3(.3, .3, .6)));
                    if (mask.x + mask.y + mask.z < .5 && v_normal.z < .6) {
                        // windows
                        color.rgb -= vec3(.2);
                    }

    palms:
        base: points
        animated: true
        texcoords: true
        texture: palm
        # blend: overlay
        shaders:
            blocks:
                color: |
                    float number_of_frames = 4.;
                    float frames_per_second = 2.;
                    // animate palms -- offset a bit by screen position
                    float time = u_time + gl_FragCoord.x / 100.;
                    float offset = floor(mod(time * frames_per_second, number_of_frames))/number_of_frames;
                    color = texture2D(u_texture, (vec2(v_texcoord.x/number_of_frames, v_texcoord.y) + vec2(offset, 0.)));
    palmshadows:
        base: points
        mix: shadow
        lighting: false # ignore lights
        texture: singlepalm
        blend: multiply
        shaders:
            blocks:
                # set alpha to texture alpha
                color: color.a = texture2D(u_texture, (vec2(v_texcoord.x, v_texcoord.y))).a;
                # bend tree shadow over
                position: position.x += v_texcoord.y * 50.;

textures:
    palm:
        url: palm_sprites.png
        filtering: nearest
    singlepalm:
        url: single-palm.png
        filtering: nearest

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            flatpolys:
                order: 0
                color: [0.882, 0.886, 0.788]

    landuse:
        data: { source: osm, layer: landuse }
        parks:
            draw:
                flatpolys:
                    order: 1
                    color: [0.5, 0.825, 0.5]
    water:
        data: { source: osm, layer: water }
        draw:
            flatpolys:
                order: 3
                color: [0.671, 0.784, 0.949]

    roads:
        data: { source: osm, layer: roads }
        filter: { not: {kind: [rail] } }
        draw:
            flatlines:
                order: 7
                color: [0.65882, 0.65882, 0.50196]
                width: 10
        highway:
            filter: { kind: highway }
            draw:
                flatlines:
                    color: [1.000, 0.863, 0.133]
                    width: 17
                    outline:
                        width: 1
                        color: [0.671, 0.784, 0.949]
            shadows:
                draw:
                    lineshadow:
                        width: 10
                        color: [0.671, 0.784, 0.949]
                link:
                    filter: { is_link: yes } # on- and off-ramps, etc
                    draw:
                        lineshadow:
                            width: 10
                            color: [0.671, 0.784, 0.949]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    flatlines:
                        width: 10
        path:
            filter: { kind: path }
            draw:
                flatlines:
                    width: 2
        z-order:
            draw:
                flatlines:
                    # let roads sort themselves
                    order: function() { return 6 + feature.sort_key * 2.; }
            shadows:
                draw:
                    lineshadow:
                        # one layer below the roads
                        order: function() { return 5 + feature.sort_key * 2.; }

    # buildings are the only layer that gets lighting
    buildings:
        data: { source: osm }
        draw:
            windows:
                order: 80
                color: [0.941, 0.925, 0.769]
                extrude: function () { return feature.height || feature.area / 100 % 1 * 20 + 20; }
        shadows:
            draw:
                shadow:
                    order: 80
                    extrude: function () { return feature.height || feature.area / 100 % 1 + 10; }
    pois:
        data: { source: osm }
        filter:
            not:
                kind: [tree, helipad]
        draw:
            palms:
                size: 32px
        shadow:
            draw:
                palmshadows:
                    order: 50
                    size: 32px
