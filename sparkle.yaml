sources:
    osm:
        type: TopoJSON
        url:  https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.topojson?api_key=d161Q8KATMOhSOcVGNyQ8g
        max_zoom: 16

camera:
    type: perspective
    vanishing_point: [0, -1000]

lights:
    light1:
        type: ambient
        direction: [1, 1, -.9]
        diffuse: .0
        ambient: 2.

# import noise function from external file
import: [noise.yaml]

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    flatpolys:
        base: polygons
        lighting: false # ignore lights

    galaxy:
        base: polygons
        material:
            ambient:
                texture: galaxy.jpg
                mapping: spheremap
    stars:
        base: polygons
        material:
            ambient:
                texture: stars.jpg
                mapping: spheremap
                # scale: .0001

    buildings:
        base: polygons
        mix: [galaxy, noise]
        animated: true
        shaders:
            defines:
                GRAIN_AMOUNT: .3
                NUM_OCTAVES: 1
            uniforms:
                u_frequency: 8.
            blocks:
                color: |
                    float pixelSize = 4.;
                    float fps = .05;
                    float t = u_time * fps;
                    float t2 = u_time * fps +.66;
                    vec3 pos = floor(worldPosition().xyz/pixelSize);
                    vec3 sparkles = vec3(0.);
                    sparkles = vec3(cnoise(pos+t))*2.;
                    sparkles += vec3(cnoise(pos+t2))*2.;
                    // clamp
                    float minInput = .95;
                    float maxInput = 1.;
                    sparkles = min(max(sparkles - vec3(minInput), vec3(0.0)) / (vec3(maxInput) - vec3(minInput)), vec3(1.0));
                    // brighten 
                    sparkles += .5;
                    color.rgb *= sparkles;
                    
    roads:
        base: lines
        texcoords: true
        blend: add
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    color.rgb *= vec3(sin(st.x*4.-.5)*.5, .5, .5);

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            stars:
                order: function() { return feature.sort_rank; }
                color: [.1, .1, .1]

    landuse:
        data: { source: osm, layer: landuse }
        parks:
            draw:
                stars:
                    order: function() { return feature.sort_rank; }
                    color: white
    water:
        data: { source: osm, layer: water }
        draw:
            stars:
                order: function() { return feature.sort_rank; }
                color: [0.671, 0.784, 0.949]

    roads:
        data: { source: osm, layer: roads }
        draw:
            roads:
                order: function() { return feature.sort_rank; }
                color: [1.000, 0.318, 0.737]
                width: [[14, 80], [16, 30]]
                cap: round
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    color: [1.000, 0.925, 0.000]
                    width: [[12, 500], [16, 100]]


    # buildings are the only layer that gets lighting
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: function() { return feature.sort_rank; }
                extrude: function () { return feature.height || feature.area / 100 % 1 * 20 + 20; }
