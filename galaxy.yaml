sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-HqUVidw
        
camera:
    type: perspective
    vanishing_point: [0, -1000]

lights:
    light1:
        type: ambient
        ambient: 2.

styles:
    flatlines:
        base: lines
        lighting: false # ignore lights
    flatpolys:
        base: polygons
        lighting: false # ignore lights

    galaxy:
        base: polygons
        material:
            ambient:
                texture: galaxy.jpg
                mapping: spheremap
    stars:
        base: polygons
        material:
            ambient:
                texture: stars2.jpg
                mapping: spheremap

    # import noise function from external file
    noise:
        url: noise.yaml

    buildings:
        base: polygons
        mix: [galaxy, noise]
        animated: true
        shaders:
            blocks:
                color: |
                    float pixelSize = 8.;
                    float fps = .05;
                    vec3 pos = floor(v_world_position.xyz/pixelSize);
                    
                    float t = u_time * fps;
                    // fill in the gap in periodic perlin noise
                    float t2 = u_time * fps +.66;
                    vec3 sparkles = vec3(cnoise(pos+t))*2.;
                    sparkles += vec3(cnoise(pos+t2))*2.;

                    // clamp to maximize sparkletude
                    float minInput = .95;
                    float maxInput = 1.;

                    sparkles = min(max(sparkles - vec3(minInput), vec3(0.0)) / (vec3(maxInput) - vec3(minInput)), vec3(1.0));

                    // brighten walls
                    sparkles += .25;
                    color.rgb *= sparkles * 2.;
                    // brighten roofs
                    if (v_normal.z > .9) color.rgb += sparkles * 5.;

    roads:
        base: lines
        lighting: false
        texcoords: true
        blend: add
        shaders:
            blocks:
                color: |
                    vec2 st = v_texcoord.xy;
                    color.rgb *= vec3(sin(st.x*4.-.5)*.5, .5, .5);

layers:
    earth:
        data: { source: osm, layer: earth }
        draw:
            stars:
                order: function() { return feature.sort_key; }
                color: [.25, 0, .25]

    landuse:
        data: { source: osm, layer: landuse }
        parks:
            draw:
                stars:
                    order: function() { return feature.sort_key; }
                    color: [0, 0, .15]
    water:
        data: { source: osm, layer: water }
        draw:
            stars:
                order: function() { return feature.sort_key; }
                color: [0.671, 0.784, 0.949]

    roads:
        data: { source: osm, layer: roads }
        draw:
            roads:
                order: function() { return feature.sort_key; }
                color: [1.000, 0.5, 01.]
                width: [[14, 80], [16, 30]]
                cap: round
        highway:
            filter: { kind: highway }
            draw:
                roads:
                    color: [[6, [0, 0, 0]], [17, [1.000, 1., 0.00]]]
                    width: [[12, 500], [16, 100]]

    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: function() { return feature.sort_key; }
                color: white
                extrude: function () { return feature.height || feature.area / 100 % 1 * 20 + 20; }
